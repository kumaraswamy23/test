public String newSpConnectionCreation(@RequestBody ConnectionModel connectionModel) throws Exception{
        String apiResponse = "";
        ObjectMapper Obj = new ObjectMapper();
        RootConnection rootConnection = PojoConverterHelper.connectionConvert(connectionModel);
        String connectionStr = Obj.writeValueAsString(rootConnection);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Basic RkNDVUNQOTpXZWxjb21lMTIzIQ==");
        headers.add("X-XSRF-Header", "PingFederate");
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity request= new HttpEntity(connectionStr, headers);
        ResponseEntity<com.ping.admin.api.selectormodel.Root> selectorResponse = new RestTemplate().exchange(seletorUrl+"UAID516Selectortest", HttpMethod.GET, request, com.ping.admin.api.selectormodel.Root.class);
        HttpStatus status = selectorResponse.getStatusCode();
        String statusValue = status.toString();
        System.out.println("Status Value"+ statusValue);
        apiResponse = apiResponse + "Selector retreived successfully" + "/n";
        if(statusValue.contains("200")) {
            try {
            	ResponseEntity<String> response = new RestTemplate().exchange(url, HttpMethod.POST, request, String.class);
            } catch(Exception e) {
            	apiResponse = apiResponse + "Connection creation not successfully " + "/n";
            	throw new Exception("COnnection creation not success");
            }
            apiResponse = apiResponse + "Connection creation successfully " + "/n";
            com.ping.admin.api.selectormodel.Root root = selectorResponse.getBody();
            ArrayList<Table> tables = root.getConfiguration().getTables(); 
            ArrayList<Field> fields = new ArrayList<Field>(); 
            fields.add(new Field("Connection",connectionModel.getConnectionEntityId())); 
            Table table = tables.get(0); ArrayList<Row> rows = table.getRows(); 
            rows.add(new Row(fields,false));
            String selectorStr = Obj.writeValueAsString(root);
            System.out.println("Test Seltor String*****" + selectorStr);
            HttpEntity selectorRequest= new HttpEntity(selectorStr, headers);
            new RestTemplate().exchange(seletorUrl+"UAID516Selectortest", HttpMethod.PUT, selectorRequest, String.class);
            try {
            	ResponseEntity<String> selectorUpdate = new RestTemplate().exchange(seletorUrl+"UAID516Selectortest", HttpMethod.PUT, selectorRequest, String.class);
            } catch(Exception e) {
            	apiResponse = apiResponse + "Selector updation not successfully " + "/n";
            	throw new Exception("Selector updation not successfully");
            }
            apiResponse = apiResponse + "Selector updation successfully " + "/n";
        }
		return apiResponse;
	}
